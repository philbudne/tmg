"""
Ptthon script to postprocess tmgl7a output
to make code acceptabe to as7 and PDP-7 tmgl builtins
only handles cases generated by tmgl7a running over itself!
"""

import sys
import re

STR_RE = re.compile("<[^>]*>")

end_next = ''
for line in sys.stdin.readlines():
    if end_next:
        if not line.startswith('x '):
            line = end_next + line
        end_next = ''

    # PDP-11 uses bare address for both builtins and TMG code
    # (determines which by address range)
    # need to have a rule that recognizes all builtins???

    line = line.replace("parse", "rf parsedo")
    if 'x rf parsedo' in line:
        end_next = 'x '
        line = line.replace('x rf parsedo', 'rf parsedo')
    line = line.replace("smark", "rf mark")
    line = line.replace("ignore", "rf ign11")
    line = line.replace("octal", "rf octal")
    line = line.replace("any", "rf char")

    # split up string lits
    # wondering if lit strings were dumped out by symoct (in octal)?!
    # OR if PDP-7 TMGL only had two-char lits?
    # OR whether a looping rule with char(nogt) char(nogt) would work
    #   to peel of character pairs?
    def fixstr(m):
        s = m.string[m.start()+1:m.end()-1]
        out = []
        while len(s) > 1:
            o0 = ord(s[0])
            o1 = ord(s[1])
            if o0 > 0o40 and o0 < 0o177:
                if o1 > 0o40 and o1 < 0o177:
                    out.append("<%s>" % s[0:2])
                else:
                    out.append("<%s %03o" % (s[0], o1))
            else:
                if o1 > 0o40 and o1 < 0o177:
                    out.append("%03o000 %s>" % (o0, s[1]))
                else:
                    out.append("%03o%03o %s>" % (o0, o1))
            s = s[2:]
        if len(s) == 1:
            o0 = ord(s[0])
            if o0 > 0o40 and o0 < 0o177:
                out.append("<%s 0777" % s)
            else:
                out.append("%03o777" % o0)
        else:
            out.append('end')
        return '; '.join(out)
    line = STR_RE.sub(fixstr, line)
    sys.stdout.write(line)
